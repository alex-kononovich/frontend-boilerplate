require 'sinatra'
require 'sinatra/base'
require 'sinatra/partial'

require 'slim'
require 'coffee-script'
require 'eco'

require 'sprockets'
require 'sprockets-sass'

require 'compass'


# we need to use middleware, because other way capybara won't be able to load 
# any files generated by sprocket - css, js
class SprocketsMiddleware
  attr_reader :app, :prefix, :sprockets

  def initialize(app, prefix, root)
    @app = app
    @prefix = prefix
    @sprockets = Sprockets::Environment.new root

    yield sprockets if block_given?
  end

  def call(env)
    path_info = env['PATH_INFO']
    if path_info =~ prefix
      env['PATH_INFO'].sub!(prefix, '')
      sprockets.call(env)
    else
      app.call(env)
    end
  ensure
    env['PATH_INFO'] = path_info
  end
end



class App < Sinatra::Base
  set :root, File.expand_path(File.dirname(__FILE__))
  
  register Sinatra::Partial

  use SprocketsMiddleware, %r{/assets}, root do |env|
    %w{javascripts images stylesheets}.each do |type|
      env.append_path File.join('app', 'assets', type)
      env.append_path File.join('vendor', 'assets', type)
    end
  end

  configure :development do
    require 'rack-livereload'
    use Rack::LiveReload
  end

  configure do
    set :slim, :disable_escape => true
    set :slim, :pretty => true
    set :views, File.dirname(__FILE__) + '/app/views'
    set :partial_template_engine, :slim
    enable :partial_underscores
  end

  get '/' do
    slim :"index.html", layout: :'layouts/application.html'
  end

  get '/:page' do
    page = params[:page]
    unless page == 'favicon.ico'
      slim "#{page}.html".to_sym, layout: :"layouts/application.html"
    end
  end

  get '/:layout/:page' do
    page = params[:page]
    layout = params[:layout]
    slim page.to_sym, layout: :"layouts/#{layout}"
  end
end

